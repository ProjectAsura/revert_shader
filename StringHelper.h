//-------------------------------------------------------------------------------------------------
// File : StringHelper.h
// Desc : String Helper.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <string>
#include <vector>


///////////////////////////////////////////////////////////////////////////////////////////////////
// StringHelper class
///////////////////////////////////////////////////////////////////////////////////////////////////
class StringHelper
{
    //============================================================================================
    // list of friend classes and methods.
    //============================================================================================
    /* NOTHING */

public:
    //============================================================================================
    // public varaibles.
    //============================================================================================
    /* NOTHING */

    //============================================================================================
    // public methods.
    //============================================================================================

    //--------------------------------------------------------------------------------------------
    //! @brief      文字列を置き換えます.
    //--------------------------------------------------------------------------------------------
    static std::string Replace(
        const std::string&  input,
        std::string         pattern,
        std::string         replace);

    //--------------------------------------------------------------------------------------------
    //! @brief      文字列を置き換えます.
    //--------------------------------------------------------------------------------------------
    static std::wstring Replace(
        const std::wstring& input,
        std::wstring        pattern,
        std::wstring        replace);

    //--------------------------------------------------------------------------------------------
    //! @brief      全て小文字に変換します.
    //--------------------------------------------------------------------------------------------
    static std::string ToLower(std::string value);

    //--------------------------------------------------------------------------------------------
    //! @brief      全て小文字に変換します.
    //--------------------------------------------------------------------------------------------
    static std::wstring ToLower(std::wstring value);

    //--------------------------------------------------------------------------------------------
    //! @brief      全て大文字に変換します.
    //--------------------------------------------------------------------------------------------
    static std::string ToUpper(std::string value);

    //--------------------------------------------------------------------------------------------
    //! @brief      全て大文字に変換します.
    //--------------------------------------------------------------------------------------------
    static std::wstring ToUpper(std::wstring value);

    //--------------------------------------------------------------------------------------------
    //! @brief      部分文字列に分割します.
    //--------------------------------------------------------------------------------------------
    static std::vector<std::string> Split(const std::string& input, std::string split);

    //--------------------------------------------------------------------------------------------
    //! @brief      部分文字列に分割します.
    //--------------------------------------------------------------------------------------------
    static std::vector<std::wstring> Split(const std::wstring& input, std::wstring split);

    //--------------------------------------------------------------------------------------------
    //! @brief      部分文字列を含むかどうかチェックします.
    //!
    //! @return     検索ヒットした回数を返却します.
    //--------------------------------------------------------------------------------------------
    static int Contain(const std::string& input, std::string value);

    //--------------------------------------------------------------------------------------------
    //! @brief      部分文字列を含むかどうかチェックします.
    //!
    //! @return     検索ヒットした回数を返却します.
    //--------------------------------------------------------------------------------------------
    static int Contain(const std::wstring& input, std::wstring value);

    //--------------------------------------------------------------------------------------------
    //! @brief      文字列を整形します.
    //! @note       最大4096文字まで.
    //--------------------------------------------------------------------------------------------
    static std::string Format(const char* format, ...);

    //--------------------------------------------------------------------------------------------
    //! @brief      文字列を整形します.
    //! @note       最大4096文字まで.
    //--------------------------------------------------------------------------------------------
    static std::wstring Format(const wchar_t* format, ...);

    //--------------------------------------------------------------------------------------------
    //! @brief      スウィズル文字数を取得します.
    //!
    //! @return     スウィズル文字数を返却します.
    //--------------------------------------------------------------------------------------------
    static int GetSwizzleCount(std::string value);

    //--------------------------------------------------------------------------------------------
    //! @brief      スウィズル文字数を取得します.
    //!
    //! @return     スウィズル文字数を返却します.
    //--------------------------------------------------------------------------------------------
    static int GetSwizzleCount(std::wstring value);

    //--------------------------------------------------------------------------------------------
    //! @brief      スウィズル文字を取得します.
    //!
    //! @param[in]      value       入力文字列.
    //--------------------------------------------------------------------------------------------
    static std::string GetSwizzle(std::string value, int count = 4);

    //--------------------------------------------------------------------------------------------
    //! @brief      スウィズル文字を取得します.
    //!
    //! @param[in]      value       入力文字列.
    //--------------------------------------------------------------------------------------------
    static std::wstring GetSwizzle(std::wstring value, int count = 4);

    //--------------------------------------------------------------------------------------------
    //! @brief      スウィズル文字数を考慮して文字列を取得します.
    //!
    //! @param[in]      value       入力文字列.
    //! @param[in]      count       文字数制限です(-1から4が有効範囲).
    //!                             0 を指定した場合はスウィズルを削除して返却します.
    //!                             -1 を指定した場合はスウィズルが .xyzw の場合のみ，スウィズルなしで返却します.
    //! @return     指定に応じてスウィズルを付きで文字列を返却します.
    //--------------------------------------------------------------------------------------------
    static std::string GetWithSwizzle(std::string value, int count = -1);

    //--------------------------------------------------------------------------------------------
    //! @brief      スウィズル文字数を考慮して文字列を取得します.
    //!
    //! @param[in]      value       入力文字列.
    //! @param[in]      count       文字数制限です(-1から4が有効範囲).
    //!                             0 を指定した場合はスウィズルを削除して返却します.
    //!                             -1 を指定した場合はスウィズルが .xyzw の場合のみ，スウィズルなしで返却します.
    //! @param[in]      pIndex      スウィズルインデックスです.
    //! @return     指定に応じてスウィズルを付きで文字列を返却します.
    //--------------------------------------------------------------------------------------------
    static std::string GetWithSwizzleEx(std::string value, int count, const int* pIndex);

    //--------------------------------------------------------------------------------------------
    //! @brief      スウィズル文字数を考慮して文字列を取得します.
    //!
    //! @param[in]      value       入力文字列.
    //! @param[in]      count       文字数制限です(-1から4が有効範囲).
    //!                             0 を指定した場合はスウィズルを削除して返却します.
    //!                             -1 を指定した場合はスウィズルが .xyzw の場合のみ，スウィズルなしで返却します.
    //! @return     指定に応じてスウィズルを付きで文字列を返却します.
    //--------------------------------------------------------------------------------------------
    static std::wstring GetWithSwizzle(std::wstring value, int count = -1);

    //--------------------------------------------------------------------------------------------
    //! @brief      スウィズル文字数を考慮して文字列を取得します.
    //!
    //! @param[in]      value       入力文字列.
    //! @param[in]      count       文字数制限です(-1から4が有効範囲).
    //!                             0 を指定した場合はスウィズルを削除して返却します.
    //!                             -1 を指定した場合はスウィズルが .xyzw の場合のみ，スウィズルなしで返却します.
    //! @param[in]      pIndex      スウィズルインデックスです.
    //! @return     指定に応じてスウィズルを付きで文字列を返却します.
    //--------------------------------------------------------------------------------------------
    static std::wstring GetWithSwizzleEx(std::wstring value, int count, const int* pIndex);

    //--------------------------------------------------------------------------------------------
    //! @brief      配列要素を部分文字列として取得します.
    //--------------------------------------------------------------------------------------------
    static std::vector<std::string> SplitArrayElement(std::string value);

    //--------------------------------------------------------------------------------------------
    //! @brief      配列要素を部分文字列として取得します.
    //--------------------------------------------------------------------------------------------
    static std::vector<std::wstring> SplitArrayElement(std::wstring value);

    //--------------------------------------------------------------------------------------------
    //! @brief      配列要素を整数として取得します.
    //--------------------------------------------------------------------------------------------
    static std::vector<int> SplitArrayElementAsInt(std::string value);

    //--------------------------------------------------------------------------------------------
    //! @brief      配列要素を整数として取得します.
    //--------------------------------------------------------------------------------------------
    static std::vector<int> SplitArrayElementAsInt(std::wstring value);

    //---------------------------------------------------------------------------------------------
    //! @brief      変数を解析します.
    //!
    //! @param[in]      value       一行データ.
    //! @param[out]     type        データ型(template型は非対応です).
    //! @param[out]     name        名前.
    //! @param[out]     elements    配列サイズ.
    //---------------------------------------------------------------------------------------------
    static void ParseVariable(
        const std::string&  value,
        std::string&        type,
        std::string&        name,
        std::vector<int>&   elements);

    //--------------------------------------------------------------------------------------------
    //! @brief      数値を表す文字列であるかどうかチェックします.
    //!
    //! @param[in]      value       入力文字列です.
    //! @retval true    数値です.
    //! @retval false   非数値です.
    //--------------------------------------------------------------------------------------------
    static bool IsValue(const std::string& value);

    //--------------------------------------------------------------------------------------------
    //! @brief      変数を表す文字列であるかどうかチェックします.
    //!
    //! @param[in]      value       入力文字列です.
    //! @retval true    変数名です.
    //! @retval false   非数値です.
    //--------------------------------------------------------------------------------------------
    static bool IsVariable(const std::string& value);
};